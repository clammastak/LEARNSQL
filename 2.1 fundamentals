---create and restore a database-------------------------------------

---create and restore a table schema---*table format, labels, layout---

---return values/rows of actor_id-------------------------------------
SELECT actor_id FROM actor;

---select distinct--------------------------------------------------
SELECT DISTINCT release_year FROM film;

---what are the different rental rates?----------------------------------
SELECT DISTINCT rental_rate FROM film;

---what types of ratings can movies get?------------------------------
SELECT * FROM film;
SELECT DISTINCT rating FROM film;

---what are all the customesr whose first names are Jamie? Jamie Rice?------------
SELECT last_name, first_name FROM customer WHERE first_name = 'Jamie' ;
SELECT last_name, first_name FROM customer WHERE first_name = 'Jamie' AND 'Rice';
---who paid the rental amount is or less than 1USD or greater than 8USD?----------------
SELECT customer_id, amount, payment_date FROM payment WHERE amount<=1 OR amount >=8;

---find all payments that are NOT equal to 4.99? or equal to 4.99 or 1.99?---------------------------------
SELECT * FROM payment WHERE amount != 4.99;
SELECT amount, payment_date FROM payment WHERE amount = 4.99 OR amount = 1.99;            (AND doesnt work because conditions overlap)

SELECT email FROM customer WHERE last_name = 'Thomas' AND first_name = 'Nancy';
SELECT description FROM film WHERE title = 'Outlaw Hanky';
SELECT phone FROM address WHERE address = '259 Ipoh Drive';

---COUNT function--------return the number of input rows-----------------------does not consider NULL--------
---COUNT distinct values only-----------
SELECT COUNT(DISTINCT column) FROM table;

---count number of transactions from payment table---------
SELECT COUNT(*) FROM payment;

---count the distinct amount types from payments----------
SELECT COUNT(DISTINCT amount) FROM payment;

---LIMIT-----------limit number of rows in a query----------goes at END of query---------------
SELECT * FROM customer
LIMIT 5;

---ORDER BY---------------sort result set in ASCENDING or DESCENDING order based on criteria------------use comma for multiple col----
SELECT column FROM table ORDER BY column ASC/DESC;

---find first name/last name in alphabetical order? sort by first name A-Z then by last name Z-A?----------
SELECT first_name, last_name FROM customer ORDER BY first_name ASC;
SELECT first_name, last_name FROM customer ORDER BY first_name ASC, last_name DESC;                 (Aaron Selby; Amanda Carter;...)
SELECT first_name FROM customer ORDER BY last_name;     (Rafael, Nathaniel, Kathleen,...)

---get the customer ID numbers for the top 10 highest payment amounts-------------------
SELECT customer_id, amount FROM payment ORDER BY amount DESC LIMIT 10;

---get the titles of the movies with film ids 1-5------------------------------------
SELECT title FROM film ORDER BY film_id ASC LIMIT 5;

---BETWEEN---------------------value BETWEEN low AND high---------------value NOT BETWEEN low AND high--------------------
SELECT amount, payment_date FROM payment WHERE payment_date BETWEEN '2007-02-07' AND '2007-02-15';

---IN---------------------check if a value matches any value in a list of values------value IN (SELECT value FROM table)
SELECT customer_id FROM rental WHERE customer_id IN (1,2) ORDER BY return_date DESC;

---LIKE-------------------combine with wildcard characters to find similar matches---------------Like is case sensitive-------
SELECT first_name, last_name FROM customer WHERE first_name LIKE 'Jen%';                    (Jennifer, Jennie, Jenny)
SELECT first_name, last_name FROM customer WHERE first_name LIKE '%y';                      (Mary, Dorothy, Nancy,...)
SELECT first_name, last_name FROM customer WHERE first_name LIKE '%er%';                    (Jennifer, Kimberly, Catherine,...)
SELECT first_name, last_name FROM customer WHERE first_name LIKE '_her%';                   (Cheryl, Theresa, Sherry,...)

---how many payment transactions were greater than 5.00?------------
SELECT COUNT(amount) FROM payment WHERE amount > 5;
---how many unique districts are our customers from?---------------
SELECT COUNT(DISTINCT district)) FROM address;
---retrieve list of names for those distinct districts------------
SELECT DISTINCT district FROM address;
---how many films have a rating of R and replacement cost between 5 and 15?-------------------
SELECT COUNT(*) FROM film WHERE rating = 'R' AND replacement_cost BETWEEN 5 AND 15;

---GROUP BY-----------divides the rows returned from query into groups-----apply an aggregate function-------
SELECT customer_id FROM payment GROUP BY customer_id;                    (only returns distinct customer_id)

---how much a customer hasn't paid?---------------------------------
SELECT customer_id, SUM(amount) FROM payment GROUP BY customer_id;      (251, $100.75; 106, $95.79; 120, $134.70,...)
SELECT customer_id, SUM(amount) FROM payment GROUP BY customer_id ORDER BY SUM(amount) DESC;  

---which staff member has processed the most orders?-----------------
SELECT staff_id, COUNT(payment_id) FROM payment GROUP BY staff_id;      (2, 7304; 1, 7292)

---how many films of each rating type do we have?-------------------
SELECT rating, COUNT(rating) FROM film GROUP BY rating;                 (R, 195; G, 178; NC-17, 210; PG-13, 223; PG, 194)

---what are the rental durations?------------------------------------
SELECT rental_duration, COUNT(rental_duration) FROM film GROUP BY rental_duration       (6, 212; 4, 203; 5, 191;...)

---average rental rate for a movie's rating?------------------------
SELECT rating, AVG(rental_rate) FROM film GROUP BY rating;              (R, 2.9; G, 2.8; NC-17, 2.9; PG-13, 3.03; PG, 3.05)

---how many payments did each staff member handle? and how much was the total amount processed by each staff member?------
SELECT staff_id, COUNT(amount), SUM(amount) FROM payment GROUP BY staff_id;             (2, 7304, $31,059.92; 1, 7292, $30,252.12)

---average replacement cost of movies by rating?------------------------
SELECT rating, AVG(replacement_cost) FROM film GROUP BY rating;         (R, $20.23; G, $20.12; NC-17, $20.13; PG-13 $20.40; PG, $18.9)
SELECT rating, ROUND(AVG(replacement_cost),2) FROM film GROUP BY rating;

---return the customer ids of the top 5 spenders------------------------
SELECT customer_id, SUM(amount) FROM payment 
GROUP BY customer_id ORDER BY SUM(amount) DESC LIMIT 5;

---HAVING---used in conjunction with GROUP BY clause to filter group rows that do not satisfy a condition-----------
---HAVING vs WHERE---Having clause sets condition AFTER group rows created by GROUP BY
                  ---Where clause sets the condition for individual rows BEFORE GROUP BY clause applies

---
SELECT customer_id, SUM(amount) 
FROM payment 
GROUP BY customer_id
HAVING SUM(amount) > 200;

---
SELECT store_id, COUNT(customer_id)
FROM customer
GROUP BY store_id
HAVING COUNT(customer_id) > 300;

---return film ratings of R,G,PG where the average rental rating is under 3$-------
SELECT rating, AVG(rental_rate)
FROM film
WHERE rating IN ('R','G','PG')
GROUP BY rating
HAVING AVG(rental_rate) <3;
